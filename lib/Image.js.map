{"version":3,"sources":["../src/Image.js"],"names":["shaders","Shaders","create","image","frag","createComponent","width","height","source","imageSize","resizeMode","center","zoom","Error","crop","rect","console","warn","ratio","imageRatio","t","displayName","propTypes","any","isRequired","shape","number","string"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,kBAAGC,OAAH,CAAWC,MAAX,CAAkB;AAChCC,SAAO;AACLC;AADK;AADyB,CAAlB,CAAhB;;kBAsBe,kBAAGC,eAAH,CACf,gBAQM;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,MALJC,MAKI,QALJA,MAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,6BAHJC,UAGI;AAAA,MAHJA,UAGI,mCAHS,OAGT;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,IACI,QADJA,IACI;;AACJ,MAAI,CAACH,SAAL,EAAgB;AACd,QAAID,OAAOF,KAAP,IAAgBE,OAAOD,MAA3B,EAAmC;AACjCE,kBAAY,EAAEH,OAAOE,OAAOF,KAAhB,EAAuBC,QAAQC,OAAOD,MAAtC,EAAZ;AACD,KAFD,MAGK;AACH,YAAM,IAAIM,KAAJ,CAAU,oFAAV,CAAN;AACD;AACF;AACD,MAAIC,aAAJ;AACA,UAAQJ,UAAR;AACA,SAAK,OAAL;AAAc;AACZ,YAAI,CAACC,MAAL,EAAaA,SAAS,CAAE,GAAF,EAAO,GAAP,CAAT;AACb,YAAI,CAACC,IAAL,EAAWA,OAAO,CAAP;AACX,YAAIG,OAAO,wBAASH,IAAT,EAAeD,MAAf,EAAuB,EAAEL,YAAF,EAASC,cAAT,EAAvB,EAA0CE,SAA1C,CAAX;AACAM,eAAO,yBAAUA,IAAV,EAAgB,CAAE,CAAF,EAAK,CAAL,EAAQN,UAAUH,KAAlB,EAAyBG,UAAUF,MAAnC,CAAhB,CAAP;AACAO,eAAO,CACLC,KAAK,CAAL,IAAUN,UAAUH,KADf,EAELS,KAAK,CAAL,IAAUN,UAAUF,MAFf,EAGLQ,KAAK,CAAL,IAAUN,UAAUH,KAHf,EAILS,KAAK,CAAL,IAAUN,UAAUF,MAJf,CAAP;AAMA;AACD;AACD,SAAK,SAAL;AAAgB;AACd,YAAII,UAAUC,IAAd,EAAoB;AAClBI,kBAAQC,IAAR,CAAa,kFAAb;AACD;AACD,YAAMC,QAAQZ,QAAQC,MAAtB;AACA,YAAMY,aAAaV,UAAUH,KAAV,GAAkBG,UAAUF,MAA/C;AACAO,eACEI,QAAQC,UAAR,GACE,CAAE,CAAC,IAAID,QAAQC,UAAb,IAA2B,CAA7B,EAAgC,CAAhC,EAAmCD,QAAQC,UAA3C,EAAuD,CAAvD,CADF,GAEE,CAAE,CAAF,EAAK,CAAC,IAAIA,aAAaD,KAAlB,IAA2B,CAAhC,EAAmC,CAAnC,EAAsCC,aAAaD,KAAnD,CAHJ;AAIA;AACD;AACD,SAAK,SAAL;AACE,UAAIP,UAAUC,IAAd,EAAoB;AAClBI,gBAAQC,IAAR,CAAa,kFAAb;AACD;AACDH,aAAO,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAP;AACA;;AAEF;AACE,YAAM,IAAID,KAAJ,CAAU,wCAAsCH,UAAhD,CAAN;AAlCF;;AAqCA,SAAO,gDAAI,IAAJ;AACL,YAAQV,QAAQG,KADX;AAEL,cAAU;AACRiB,SAAGZ,MADK;AAERM;AAFQ;AAFL,IAAP;AAOD,CA/Dc,EAgEb;AACEO,eAAa,OADf;AAEEC,aAAW;AACTd,YAAQ,oBAAUe,GAAV,CAAcC,UADb;AAETf,eAAW,oBAAUgB,KAAV,CAAgB;AACzBnB,aAAO,oBAAUoB,MAAV,CAAiBF,UADC;AAEzBjB,cAAQ,oBAAUmB,MAAV,CAAiBF;AAFA,KAAhB,CAFF;AAMTd,gBAAY,oBAAUiB;AANb;AAFb,CAhEa,C","file":"Image.js","sourcesContent":["import GL from \"gl-react\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport rectCrop from \"rect-crop\";\nimport rectClamp from \"rect-clamp\";\n\nconst shaders = GL.Shaders.create({\n  image: {\n    frag: `\nprecision highp float;\nvarying vec2 uv;\nuniform sampler2D t;\nuniform vec4 crop;\nvec2 invert (vec2 p) {${\"\"/* y is reversed in gl context */}\n  return vec2(p.x, 1.0-p.y);\n}\nvoid main () {\n  vec2 p = invert(invert(uv) * crop.zw + crop.xy);\n  gl_FragColor =\n    step(0.0, p.x) *\n    step(0.0, p.y) *\n    step(p.x, 1.0) *\n    step(p.y, 1.0) *\n    texture2D(t, p);\n}`\n  }\n});\n\nexport default GL.createComponent(\n({\n  width,\n  height,\n  source,\n  imageSize,\n  resizeMode = \"cover\",\n  center,\n  zoom,\n}) => {\n  if (!imageSize) {\n    if (source.width && source.height) {\n      imageSize = { width: source.width, height: source.height };\n    }\n    else {\n      throw new Error(\"gl-rect-image: imageSize is required if you don't provide {width,height} in source\");\n    }\n  }\n  let crop;\n  switch (resizeMode) {\n  case \"cover\": {\n    if (!center) center = [ 0.5, 0.5 ];\n    if (!zoom) zoom = 1;\n    let rect = rectCrop(zoom, center)({ width, height }, imageSize);\n    rect = rectClamp(rect, [ 0, 0, imageSize.width, imageSize.height ]);\n    crop = [\n      rect[0] / imageSize.width,\n      rect[1] / imageSize.height,\n      rect[2] / imageSize.width,\n      rect[3] / imageSize.height\n    ];\n    break;\n  }\n  case \"contain\": {\n    if (center || zoom) {\n      console.warn(\"gl-react-image: center and zoom props are only supported with resizeMode='cover'\");\n    }\n    const ratio = width / height;\n    const imageRatio = imageSize.width / imageSize.height;\n    crop =\n      ratio > imageRatio\n      ? [ (1 - ratio / imageRatio) / 2, 0, ratio / imageRatio, 1 ]\n      : [ 0, (1 - imageRatio / ratio) / 2, 1, imageRatio / ratio ];\n    break;\n  }\n  case \"stretch\":\n    if (center || zoom) {\n      console.warn(\"gl-react-image: center and zoom props are only supported with resizeMode='cover'\");\n    }\n    crop = [ 0, 0, 1, 1 ];\n    break;\n\n  default:\n    throw new Error(\"gl-react-image: unknown resizeMode=\"+resizeMode);\n  }\n\n  return <GL.Node\n    shader={shaders.image}\n    uniforms={{\n      t: source,\n      crop,\n    }}\n  />;\n},\n  {\n    displayName: \"Image\",\n    propTypes: {\n      source: PropTypes.any.isRequired,\n      imageSize: PropTypes.shape({\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n      }),\n      resizeMode: PropTypes.string,\n    }\n  });\n"]}